{"version":3,"sources":["server/_common/authorization.ts"],"names":[],"mappings":";;AAEA,yCAAmD;AACnD,kCAAoC;AACpC,sCAAoC;AAEpC,IAAI,MAAM,GAAG,OAAO,CAAC,sBAAsB,CAAC,EAAE,CAAC;AAElC,QAAA,gBAAgB,GAAW,OAAO,CAAC,GAAG,CAAC,qBAAqB;OAC1C,MAAM,CAAC,gBAAgB,CAAC;AAEvD,0BAA2B,OAAgB,EAAE,QAAkB,EAAE,IAAS;IAA1E,iBA8CC;IA5CC,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,IAAI,EAAE,CAAC;IACjC,EAAE,CAAC,CAAC,MAAM,CAAC,OAAO,KAAK,KAAK,CAAC,CAC7B,CAAC;QACC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,aAAa,EAAE,CAAC,CAAC;IAChE,CAAC;IACD,EAAE,CAAC,CAAC,MAAM,CAAC,YAAY,KAAK,IAAI,IAAI,MAAM,CAAC,YAAY,KAAK,SAAS,CAAC,CACtE,CAAC;QACC,IAAM,KAAK,GAAG,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,IAAI,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC;QAClE,EAAE,CAAC,CAAC,OAAO,KAAK,KAAK,WAAW,CAAC,CACjC,CAAC;YACC,GAAG,CAAC,MAAM,CAAC,KAAK,EAAE,wBAAgB,EAAE,UAAC,KAAU,EAAE,OAAY;gBAC3D,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;oBACxC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,aAAa,EAAE,CAAC,CAAC;gBAChE,iBAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,EAAE,UAAC,KAAU,EAAE,IAAW;oBAEtD,EAAE,CAAC,CAAC,KAAK,CAAC;wBACR,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;oBAE3D,OAAO,CAAC,cAAc,CAAC,GAAG,IAAI,CAAC;oBAE/B,EAAE,CAAC,CAAC,KAAI,CAAC,GAAG,IAAI,KAAI,CAAC,GAAG,CAAC,MAAM,KAAK,CAAC,CAAC,CACtC,CAAC;wBACC,OAAO,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;wBAErB,KAAI,CAAC,GAAG,CAAC,OAAO,CAAC,UAAC,SAAiB,EAAE,KAAa;4BAC9C,YAAI,CAAC,SAAS,CAAC,CAAC,OAAO,EAAC;gCACtB,EAAE,CAAC,CAAC,KAAK,KAAK,KAAI,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC;oCAAC,IAAI,EAAE,CAAC;4BAC5C,CAAC,CAAC,CAAC;wBACP,CAAC,CAAC,CAAC;oBACL,CAAC;oBACD,IAAI,EAAE,CAAC;gBAET,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC;QACD,IAAI,CACJ,CAAC;YACC,QAAQ,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,CAAC;QACtD,CAAC;IACH,CAAC;IACD,IAAI,CACJ,CAAC;QACC,IAAI,EAAE,CAAC;IACT,CAAC;AACH,CAAC;AAGD,uBAA+B,MAAW;IAExC,MAAM,CAAC,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;AACzC,CAAC;AAHD,sCAGC","file":"authorization.js","sourcesContent":["\nimport { Response, Request } from 'express';\nimport { IUser, UserModel } from '../_model/index';\nimport * as jwt from 'jsonwebtoken';\nimport { gets } from './gets/index';\n\nlet config = require('../../../Moji.config')();\n\nexport const JWT_TOKEN_SECRET: string = process.env.MOJI_JWT_TOKEN_SECRET\n                            || config.jwt_token_secret;\n\nfunction preAuthorization (request: Request, response: Response, next: any)\n{\n  const global = this.global || {};\n  if (global.allowed === false)\n  {\n    return response.handler({ status: 403, type: 'NOT_ALLOWED' });\n  }\n  if (global.mustBeLogged === true || global.mustBeLogged === undefined)\n  {\n    const token = request.get(\"Authorization\") || request.query.token;\n    if (typeof token !== 'undefined')\n    {\n      jwt.verify(token, JWT_TOKEN_SECRET, (error: any, decoded: any) => {\n        if (error || (!decoded) || (!decoded._id))\n          return response.handler({ status: 403, type: 'WRONG_TOKEN' });\n        UserModel.findById(decoded._id, (error: any, user: IUser)=> {\n\n          if (error)\n            return response.handler({ DBError: true, error: error });\n\n          request['_currentUser'] = user;\n\n          if (this.get && this.get.length !== 0)\n          {\n            request['_get'] = {};\n\n            this.get.forEach((getOption: string, index: number) => {\n                gets[getOption](request,() => {\n                  if (index === this.get.length - 1) next();\n                });\n            });\n          }\n          next();\n\n        });\n      });\n    }\n    else\n    {\n      response.handler({ status: 403, type: 'NO_TOKEN' });\n    }\n  }\n  else\n  {\n    next();\n  }\n}\n\n//[FIXME]: this function should always return Function(request..) not any\nexport function authorization (params: any): any\n{\n  return (preAuthorization.bind(params));\n}\n"]}