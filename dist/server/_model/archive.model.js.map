{"version":3,"sources":["server/_model/archive.model.ts"],"names":[],"mappings":";AACA,iBAoCA;;AApCA,qCAAiE;AAahE,CAAC;AAEF,IAAI,aAAa,GAAW,IAAI,iBAAM,CAAC;IACrC,IAAI,EAAE,EAAE,IAAI,EAAE,iBAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,GAAG,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;IAClE,KAAK,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;IACvC,WAAW,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,EAAE,EAAE,EAAE;IAC3D,QAAQ,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE;IAC3D,OAAO,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE;IAC1D,WAAW,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE;IAC9D,QAAQ,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE;IAC3D,QAAQ,EAAE,EAAE,IAAI,EAAE,iBAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,GAAG,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE;IACvE,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,iBAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC;CACzD,CAAC,CAAC;AAEH,aAAa,CAAC,GAAG,CAAC,QAAQ,EAAC,UAAC,IAAI;IAE9B,KAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,IAAS;QAC9B,KAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;IAC/C,CAAC,CAAC,CAAC;IACH,KAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,EAAE,GAAG,EAAE,KAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,EAAC,IAAI,CAAC,CAAC;AAC7D,CAAC,CAAC,CAAC;AAEU,QAAA,YAAY,GAAoB,gBAAK,CAAW,SAAS,EAAE,aAAa,CAAC,CAAC","file":"archive.model.js","sourcesContent":["\nimport { Schema, Document, Model, Types, model } from 'mongoose';\n\nexport interface IArchive extends Document\n{\n  user: Types.ObjectId;\n  title: string;\n  description: string;\n  hasFiles: boolean;\n  hasList: boolean;\n  isCheckList: boolean;\n  isHidden: boolean,\n  noteList: Types.ObjectId;\n  fileList: [Types.ObjectId];\n};\n\nlet ArchiveSchema: Schema = new Schema({\n  user: { type: Schema.Types.ObjectId, ref: 'User', required: true },\n  title: { type: String, required: true },\n  description: { type: String, required: false, default: '' },\n  hasFiles: { type: Boolean, required: true, default: false },\n  hasList: { type: Boolean, required: true, default: false },\n  isCheckList: { type: Boolean, required: true, default: false },\n  isHidden: { type: Boolean, required: true, default: false },\n  noteList: { type: Schema.Types.ObjectId, ref: 'List', required: false },\n  fileList: [{ type: Schema.Types.ObjectId, ref: 'File' }]\n});\n\nArchiveSchema.pre('remove',(next) => {\n  //[FIXME]: przepisac to zeby nie w taki sposob byly kasowane pliki\n  this.fileList.forEach((file: any)=>{\n    this.model('File').remove({ _id: file._id });\n  });\n  this.model('List').remove({ _id: this.noteList._id },next);\n});\n\nexport const ArchiveModel: Model<IArchive> = model<IArchive>('Archive', ArchiveSchema);\n"]}