{"version":3,"sources":["server/_model/task.model.ts"],"names":[],"mappings":";;AACA,qCAAiE;AACjE,0CAA+D;AAkB9D,CAAC;AAEF,IAAI,UAAU,GAAW,IAAI,iBAAM,CAAC;IAClC,KAAK,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;IACvC,WAAW,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAE,EAAE,EAAE;IAC1D,KAAK,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE;IACtC,GAAG,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE;IACpC,OAAO,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE;IACvE,OAAO,EAAE,EAAE,IAAI,EAAE,iBAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,GAAG,EAAE,SAAS,EAAE,QAAQ,EAAE,IAAI,EAAE;IACxE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,iBAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC;IACpD,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,iBAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,GAAG,EAAE,QAAQ,EAAE,CAAC;IACxD,QAAQ,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,gBAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE;IAC1D,MAAM,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,cAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;IACtD,SAAS,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,iBAAS,EAAE,QAAQ,EAAE,IAAI,EAAE;IAC5D,QAAQ,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;IAC1C,OAAO,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE;IAC1D,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC;CAC3C,CAAC,CAAC;AAEU,QAAA,SAAS,GAAiB,gBAAK,CAAQ,MAAM,EAAE,UAAU,CAAC,CAAC","file":"task.model.js","sourcesContent":["\nimport { Schema, Document, Model, Types, model } from 'mongoose';\nimport { Status, Difficult, Priority } from '../_common/index';\n\nexport interface ITask extends Document\n{\n  title: string;\n  description: string;\n  start: Date;\n  end: Date;\n  achieve: number;\n  project: Types.ObjectId;\n  type: [Types.ObjectId];\n  member: [Types.ObjectId];\n  priority: string;\n  status: string;\n  difficult: string;\n  comments: string;\n  deleted: boolean;\n  history: [{ date: Date, content: String }];\n};\n\nlet TaskSchema: Schema = new Schema({\n  title: { type: String, required: true },\n  description: { type: String, required: true, default: '' },\n  start: { type: Date, required: false },\n  end: { type: Date, required: false },\n  achieve: { type: Number, required: true, default: 0, min: 0, max: 100 },\n  project: { type: Schema.Types.ObjectId, ref: 'Project', required: true },\n  type: [{ type: Schema.Types.ObjectId, ref: 'Type' }],\n  member: [{ type: Schema.Types.ObjectId, ref: 'Member' }],\n  priority: { type: String, enum: Priority, required: true },\n  status: { type: String, enum: Status, required: true },\n  difficult: { type: String, enum: Difficult, required: true },\n  comments: { type: String, required: true },\n  deleted: { type: Boolean, required: true, default: false },\n  history: [{ date: Date, content: String }]\n});\n\nexport const TaskModel: Model<ITask> = model<ITask>('Task', TaskSchema);\n"]}