{"version":3,"sources":["server/_service/register.route.ts"],"names":[],"mappings":"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","file":"register.route.js","sourcesContent":["\nimport { Router, Response, Request } from 'express';\nimport { IUser, UserModel } from '../_model/index';\nimport { generateRandomString } from '../_common/index';\nimport { authorization, JWT_TOKEN_SECRET } from '../_common/index';\nimport * as jwt from 'jsonwebtoken';\n\nexport const register = Router();\n\nregister.post('/register', authorization({\n\n    global: { mustBeLogged: false, allowed: true }\n\n}),(request: Request, response: Response) => {\n  //[TODO]: lower case service for username and email\n  UserModel.findOne({\n    $or: [\n      {username: request.body.username},\n      {email: request.body.email}\n    ]\n  },(error: any, user: IUser) => {\n    if (error)\n      return response.handler({ DBError: true, error: error });\n\n    const userData = request.body;\n\n    if (user)\n    {\n      userData.username = userData.username.toLowerCase();\n      userData.email = userData.email.toLowerCase();\n\n      if (user.username == userData.username && user.email == userData.email)\n      {\n        response.handler({ type: 'USER_EXIST_WITH_EMAIL_AND_USERNAME' });\n      }\n      else if (user.email == userData.email)\n      {\n        response.handler({ type: 'USER_EXIST_WITH_EMAIL' });\n      }\n      else if (user.username == userData.username)\n      {\n        response.handler({ type: 'USER_EXIST_WITH_USERNAME' });\n      }\n    }\n    else\n    {\n      let newUser = new UserModel({\n        username: userData.username,\n        password: userData.password,\n        firstname: userData.firstname,\n        lastname: userData.lastname,\n        email: userData.email,\n        token: generateRandomString(),\n        notifications: [],\n        setting: {}\n      });\n\n      newUser.save().then((createdUser: IUser) => {\n\n        createdUser.token = jwt.sign(<Object>{\n          _id: <string>createdUser._id,\n          username: <string>userData.username,\n          password: <string>userData.password,\n          email: <string>userData.email\n        }, JWT_TOKEN_SECRET);\n\n        createdUser.save().then(()=>{\n          response.handler({ type: 'USER_CREATED' });\n        });\n\n      });\n\n    }\n  });\n\n});\n"]}