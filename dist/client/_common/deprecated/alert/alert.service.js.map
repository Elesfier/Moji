{"version":3,"sources":["client/_common/deprecated/alert/alert.service.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sCAA2C;AAC3C,0CAA0D;AAE1D,wCAAuC;AAGvC,IAAa,YAAY;IAIrB,sBAAoB,MAAc;QAAlC,iBAaC;QAbmB,WAAM,GAAN,MAAM,CAAQ;QAH1B,YAAO,GAAG,IAAI,iBAAO,EAAO,CAAC;QAC7B,8BAAyB,GAAG,KAAK,CAAC;QAItC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,UAAA,KAAK;YACzB,EAAE,CAAC,CAAC,KAAK,YAAY,wBAAe,CAAC,CAAC,CAAC;gBACnC,EAAE,CAAC,CAAC,KAAI,CAAC,yBAAyB,CAAC,CAAC,CAAC;oBAEjC,KAAI,CAAC,yBAAyB,GAAG,KAAK,CAAC;gBAC3C,CAAC;gBAAC,IAAI,CAAC,CAAC;oBAEJ,KAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;gBACxB,CAAC;YACL,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAED,8BAAO,GAAP,UAAQ,OAAe,EAAE,yBAAiC;QAAjC,0CAAA,EAAA,iCAAiC;QACtD,IAAI,CAAC,yBAAyB,GAAG,yBAAyB,CAAC;QAC3D,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;IAC1D,CAAC;IAED,2BAAI,GAAJ,UAAK,OAAe,EAAE,yBAAiC;QAAjC,0CAAA,EAAA,iCAAiC;QACrD,IAAI,CAAC,yBAAyB,GAAG,yBAAyB,CAAC;QAC3D,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;IACrD,CAAC;IAED,8BAAO,GAAP,UAAQ,OAAe,EAAE,yBAAiC;QAAjC,0CAAA,EAAA,iCAAiC;QACxD,IAAI,CAAC,yBAAyB,GAAG,yBAAyB,CAAC;QAC3D,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;IACxD,CAAC;IAED,4BAAK,GAAL,UAAM,OAAe,EAAE,yBAAiC;QAAjC,0CAAA,EAAA,iCAAiC;QACpD,IAAI,CAAC,yBAAyB,GAAG,yBAAyB,CAAC;QAC3D,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;IACxD,CAAC;IAED,iCAAU,GAAV;QACI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;IACvC,CAAC;IACL,mBAAC;AAAD,CA1CA,AA0CC,IAAA;AA1CY,YAAY;IADxB,iBAAU,EAAE;qCAKmB,eAAM;GAJzB,YAAY,CA0CxB;AA1CY,oCAAY","file":"alert.service.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router, NavigationStart } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { Subject } from 'rxjs/Subject';\n\n@Injectable()\nexport class AlertService {\n    private subject = new Subject<any>();\n    private keepAfterNavigationChange = false;\n\n    constructor(private router: Router) {\n        // clear alert message on route change\n        router.events.subscribe(event => {\n            if (event instanceof NavigationStart) {\n                if (this.keepAfterNavigationChange) {\n                    // only keep for a single location change\n                    this.keepAfterNavigationChange = false;\n                } else {\n                    // clear alert\n                    this.subject.next();\n                }\n            }\n        });\n    }\n\n    success(message: string, keepAfterNavigationChange = false) {\n        this.keepAfterNavigationChange = keepAfterNavigationChange;\n        this.subject.next({ type: 'success', text: message });\n    }\n\n    info(message: string, keepAfterNavigationChange = false) {\n      this.keepAfterNavigationChange = keepAfterNavigationChange;\n      this.subject.next({ type: 'info', text: message });\n    }\n\n    warning(message: string, keepAfterNavigationChange = false) {\n      this.keepAfterNavigationChange = keepAfterNavigationChange;\n      this.subject.next({ type: 'warning', text: message });\n    }\n\n    error(message: string, keepAfterNavigationChange = false) {\n        this.keepAfterNavigationChange = keepAfterNavigationChange;\n        this.subject.next({ type: 'error', text: message });\n    }\n\n    getMessage(): Observable<any> {\n        return this.subject.asObservable();\n    }\n}\n"]}