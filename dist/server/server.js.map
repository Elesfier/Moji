{"version":3,"sources":["server/server.ts"],"names":[],"mappings":";;AACA,iCAAmC;AACnC,2BAA6B;AAC7B,+BAAiC;AACjC,mCAAqC;AACrC,wCAA0C;AAC1C,0CAA4C;AAC5C,wCAAwC;AAExC,IAAI,MAAM,GAAG,OAAO,CAAC,mBAAmB,CAAC,EAAE,CAAC;AAE5C,IAAM,QAAQ,GAAW,OAAO,CAAC,GAAG,CAAC,cAAc;OAC5B,MAAM,CAAC,QAAQ;OACf,MAAM,CAAC,aAAa,CAAC;AAEjC,QAAA,GAAG,GAAG,OAAO,EAAE,CAAC;AAEhB,QAAA,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,WAAG,CAAC,CAAC;AAE3C,WAAG,CAAC,GAAG,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;AAGnD,WAAG,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,EAAC,KAAK,EAAE,MAAM,EAAC,CAAC,CAAC,CAAC;AAE1C,WAAG,CAAC,GAAG,CAAC,UAAU,CAAC,UAAU,CAAC,EAAC,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC,CAAC;AAEhE,WAAG,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;AAEvB,WAAG,CAAC,GAAG,CAAC,UAAC,OAAY,EAAE,QAAa,EAAE,IAAS;IAC7C,QAAQ,CAAC,SAAS,CAAC,6BAA6B,EAAE,GAAG,CAAC,CAAC;IACvD,QAAQ,CAAC,SAAS,CAAC,8BAA8B,EAAE,WAAW,CAAC,CAAC;IAChE,QAAQ,CAAC,SAAS,CAAC,8BAA8B,EAC9B,+CAA+C,CAAC,CAAC;IACpE,IAAI,EAAE,CAAC;AACT,CAAC,CAAC,CAAC;AAGH,WAAG,CAAC,GAAG,CAAC,UAAC,OAAY,EAAE,QAAa,EAAE,IAAS;IAC7C,QAAQ,CAAC,OAAO,GAAG,UAAU,MAAW;QACtC,MAAM,CAAC,IAAI,CAAC,MAAM,CAChB,CAAC,MAAM,CAAC,OAAO,IAAI,MAAM,CAAC,KAAK,CAAC,GAAC,CAAC,GAAG,CAAC,GAAC,CAAC,MAAM,CAAC,MAAM,IAAI,GAAG,CAAC,CAC9D,CAAC,IAAI,CAAC;YACL,IAAI,EAAE,MAAM,CAAC,IAAI;YACjB,OAAO,EAAE,CACP,CAAC,MAAM,CAAC,OAAO,IAAI,MAAM,CAAC,KAAK,CAAC;gBAChC,CAAC,YAAY,GAAE,MAAM,CAAC,KAAK,CAAC,IAAI,GAAG,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,OAAO,GAAE,GAAG,CAAC;gBACpE,CAAC,MAAM,CAAC,OAAO,CAAC,CACjB;YACD,IAAI,EAAE,MAAM,CAAC,IAAI;SAClB,CAAC,CAAC;IACL,CAAC,CAAC;IACF,IAAI,EAAE,CAAC;AACT,CAAC,CAAC,CAAC;AAEH,gBAAQ,CAAC,OAAO,CAAC,UAAC,OAAuB;IACvC,WAAG,CAAC,GAAG,CAAE,cAAc,EAAE,OAAO,CAAE,CAAC;AACrC,CAAC,CAAC,CAAC;AAEH,cAAM,CAAC,OAAO,CAAC,UAAC,MAAsB;IACpC,WAAG,CAAC,GAAG,CAAE,MAAM,EAAE,MAAM,CAAE,CAAC;AAC5B,CAAC,CAAC,CAAC;AAKG,QAAS,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;AAEzC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;AAEhB,QAAA,QAAQ,GAAG,QAAQ,CAAC,UAAU,CAAC;AAG1C,gBAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,mBAAmB,CAAC,CAAC,CAAC","file":"server.js","sourcesContent":["\nimport * as express from 'express';\nimport * as http from 'http';\nimport * as morgan from 'morgan';\nimport * as mongoose from 'mongoose';\nimport * as bodyParser from 'body-parser';\nimport { services } from './_service/index';\nimport { routes } from './routes/index';\n\nlet config = require('../../Moji.config')();\n\nconst mongoURL: string = process.env.MOJI_MONGO_URL\n                    || config.mongoURL\n                    || config.test_mongoURL;\n\nexport let API = express();\n\nexport let Server = http.createServer(API);\n\nAPI.use(bodyParser.urlencoded({ extended: true }));\n\n//[FIXME]: too big\nAPI.use(bodyParser.json({limit: '50mb'}));\n\nAPI.use(bodyParser.urlencoded({limit: '50mb', extended: true}));\n\nAPI.use(morgan(\"dev\"));\n\nAPI.use((request: any, response: any, next: any)=>{\n  response.setHeader('Access-Control-Allow-Origin', '*');\n  response.setHeader('Access-Control-Allow-Methods', 'GET, POST');\n  response.setHeader('Access-Control-Allow-Headers',\n                     'X-Requested-With, content-type, Authorization');\n  next();\n});\n\n//[FIXME]: is there a better solution?\nAPI.use((request: any, response: any, next: any)=>{\n  response.handler = function (params: any) {\n    return this.status(\n      (params.DBError || params.error)?(400):(params.status || 200)\n    ).json({\n      type: params.type,\n      message: (\n        (params.DBError && params.error)?\n        ('DB_Error: '+ params.error.name + ': ' + params.error.message +'.'):\n        (params.message)\n      ),\n      data: params.data\n    });\n  };\n  next();\n});\n\nservices.forEach((service: express.Router) => {\n  API.use( '/api/service', service );\n});\n\nroutes.forEach((module: express.Router) => {\n  API.use( '/api', module );\n});\n\n// [FIXME]: better managments of express?\n\n// [FIXME]: connect with promises in mongoDB\n(<any>mongoose).Promise = global.Promise;\n\nmongoose.connect(mongoURL);\n\nexport let Database = mongoose.connection;\n\n// [FIXME]: better managments of errors DB?\nDatabase.on('error', console.error.bind(console, 'connection error:'));\n"]}