{"version":3,"sources":["server/routes/archive/archive-extensions.route.ts"],"names":[],"mappings":"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","file":"archive-extensions.route.js","sourcesContent":["\nimport { Router, Response, Request } from 'express';\nimport { IArchive, ArchiveModel, IList, ListModel, authorization } from '../index';\n\nexport const archiveExtensions = Router();\n\n////////////////////////////////////////////////////////////////////////////////\n\narchiveExtensions.get('/archive/extensions', authorization({\n\n  global: { mustBeLogged: true }\n\n}),(request: Request, response: Response) => {\n\n  let responseArchives = [];\n  ArchiveModel\n    .find({ user : request['_currentUser']._id })\n    .exec((error: any, archives: [IArchive]) => {\n      if (error) return response.handler({ DBError: true, error: error });\n      archives.forEach((archive)=>{\n        if (archive.hasList)\n          responseArchives.push({ name: archive.title, value: archive._id });\n      });\n      response.json(responseArchives);\n    });\n\n});\n\n////////////////////////////////////////////////////////////////////////////////\n\narchiveExtensions.post('/archive/extensions/:id', authorization({\n\n  global: { mustBeLogged: true }\n\n}),(request: Request, response: Response) => {\n\n  ArchiveModel\n    .findOne({\n      user: request['_currentUser']._id,\n      _id: request.params.id\n    })\n    .exec((error: any, archive: IArchive) => {\n      if (error) return response.handler({ DBError: true, error: error });\n      ListModel\n        .findOne({ _id : archive.noteList })\n        .exec((error: any, list: IList) => {\n          if (error) return response.handler({ DBError: true, error: error });\n          if (archive.hasList)\n          {\n            if (archive.isCheckList)\n              list.list.push({\n                data : { note: '', index: list.list.length },\n                columns: [\n                  { content: false, type: 'checkbox' },\n                  { content: request.body.title },\n                  { content: request.body.link, type: 'link' }\n                ]\n              });\n            else\n              list.list.push({\n                data : { note: '', index: list.list.length },\n                columns: [\n                  { content: String(list.list.length + 1), type: 'center' },\n                  { content: request.body.title },\n                  { content: request.body.link, type: 'link' }\n                ]\n              });\n          }\n          list.save((error: any) => {\n            if (error) return response.handler({ DBError: true, error: error });\n            response.handler({ type: 'NOTE_ADDED' });\n          });\n        });\n\n    });\n\n});\n\n////////////////////////////////////////////////////////////////////////////////\n"]}